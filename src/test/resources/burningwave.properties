component-container.after-init.operations=\
	Task classHunterCacheLoadingTask = BackgroundExecutor.createTask(() -> {\
		try(SearchResult<?> searchResult = ((ComponentSupplier)parameter[0]).getClassHunter().findAndCache()){}\
	}, Thread.NORM_PRIORITY).submit();\
	Task classPathHunterCacheLoadingTask = BackgroundExecutor.createTask(() -> {\
		try(SearchResult<?> searchResult = ((ComponentSupplier)parameter[0]).getClassPathHunter().findAndCache()){}\
	}, Thread.NORM_PRIORITY).submit();\
	Task byteCodeHunterCacheLoadingTask = BackgroundExecutor.createTask(() -> {\
		try(SearchResult<?> searchResult = ((ComponentSupplier)parameter[0]).getByteCodeHunter().findAndCache()){}\
	}, Thread.NORM_PRIORITY).submit();\
	return Arrays.asList(classHunterCacheLoadingTask, classPathHunterCacheLoadingTask, byteCodeHunterCacheLoadingTask);
#component-container.after-init=\
#	try(SearchResult<?> searchResult = ((ComponentSupplier)parameter[0]).getClassHunter().findAndCache()){};\
#	try(SearchResult<?> searchResult = ((ComponentSupplier)parameter[0]).getClassPathHunter().findAndCache()){};\
#	try(SearchResult<?> searchResult = ((ComponentSupplier)parameter[0]).getByteCodeHunter().findAndCache()){};
paths.custom-class-path=${paths.java-memory-compiler.class-paths}/../../src/test/external-resources/libs-for-test.zip;
paths.custom-class-path2=${paths.custom-class-path}/../spring-core-4.3.4.RELEASE.jar;
paths.custom-class-path3=${system.properties:java.class.path};
class-factory.default-class-loader=(Supplier<ClassLoader>)() -> ((ComponentSupplier)parameter[0]).getPathScannerClassLoader()
class-hunter.default-path-scanner-class-loader=(Supplier<PathScannerClassLoader>)() -> ((ComponentSupplier)parameter[0]).getPathScannerClassLoader()
#class-hunter.default-path-scanner-class-loader.supplier.additional-imports=
class-hunter.default-path-scanner-class-loader.supplier.imports=\
	${code-executor.common.imports};\
	${class-hunter.default-path-scanner-class-loader.supplier.additional-imports};\
	org.burningwave.core.classes.PathScannerClassLoader;
class-hunter.default-path-scanner-class-loader.supplier.name=\
	org.burningwave.core.classes.DefaultPathScannerClassLoaderRetrieverForClassHunter
class-hunter.new-isolated-path-scanner-class-loader.search-config.check-file-option=\
	${hunters.default-search-config.check-file-option}
class-hunter.default-path-scanner-class-loader=\
	(Supplier<PathScannerClassLoader>)() -> ((ComponentSupplier)parameter[0]).getPathScannerClassLoader()
#path-scanner-class-loader.parent=Thread.currentThread().getContextClassLoader()
#path-scanner-class-loader.search-config.check-file-option=checkFileSignature
#class-factory.default-class-loader.parent=Thread.currentThread().getContextClassLoader()
#class-factory.default-class-loader=PathScannerClassLoader.create(\
#	((ComponentSupplier)parameter[0]).getPathScannerClassLoader(),\
#	((ComponentSupplier)parameter[0]).getPathHelper(),\
#	FileSystemItem.Criteria.forClassTypeFiles(\
#		FileSystemItem.CheckingOption.FOR_NAME\
#	)\
#)
#class-hunter.default-path-scanner-class-loader=PathScannerClassLoader.create(\
#	((ComponentSupplier)parameter[0]).getPathScannerClassLoader(),\
#	((ComponentSupplier)parameter[0]).getPathHelper(),\
#	FileSystemItem.Criteria.forClassTypeFiles(\
#		FileSystemItem.CheckingOption.FOR_NAME\
#	)\
#)
code-block-1=\
	${code-block-2}\
	return Date.from(zonedDateTime.toInstant());
code-block-1.imports=\
	${code-block-2.imports}\
	java.util.Date;
code-block-2=\
	LocalDateTime localDateTime = (LocalDateTime)parameter[0];\
	ZonedDateTime zonedDateTime = localDateTime.atZone(ZoneId.systemDefault());
code-block-2.imports=\
	static org.burningwave.core.assembler.StaticComponentContainer.Strings;\
	java.time.LocalDateTime;\
	java.time.ZonedDateTime;\
	java.time.ZoneId;
